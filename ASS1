import java.rmi.Remote;
import java.rmi.RemoteException;

public interface ConverterInterface extends Remote {
    double celsiusToFahrenheit(double celsius) throws RemoteException;
}
.
.
.
.
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class ConverterImpl extends UnicastRemoteObject implements ConverterInterface {

    protected ConverterImpl() throws RemoteException {
        super();
    }

    @Override
    public double celsiusToFahrenheit(double celsius) throws RemoteException {
        return (celsius * 9 / 5) + 32;
    }
}
.
.
.
.
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class ConverterServer {
    public static void main(String[] args) {
        try {
            ConverterImpl converter = new ConverterImpl();
            Registry registry = LocateRegistry.createRegistry(1099);
            registry.rebind("ConverterService", converter);
            System.out.println("Server is running...");
        } catch (Exception e) {
            System.err.println("Server exception: " + e.toString());
            e.printStackTrace();
        }
    }
}
.
.
.
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class ConverterClient {
    public static void main(String[] args) {
        try {
            Registry registry = LocateRegistry.getRegistry("localhost", 1099);
            ConverterInterface converter = (ConverterInterface) registry.lookup("ConverterService");

            double celsius = 25;
            double fahrenheit = converter.celsiusToFahrenheit(celsius);
            System.out.println("Celsius: " + celsius + " -> Fahrenheit: " + fahrenheit);
        } catch (Exception e) {
            System.err.println("Client exception: " + e.toString());
            e.printStackTrace();
        }
    }
}
-------------------------------------------------------------
import java.rmi.Remote;
import java.rmi.RemoteException;

public interface ConverterInterface extends Remote {
    double meterToMile(double meter) throws RemoteException;
}
.
.
.
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class ConverterImpl extends UnicastRemoteObject implements ConverterInterface {

    protected ConverterImpl() throws RemoteException {
        super();
    }

    @Override
    public double meterToMile(double meter) throws RemoteException {
        return meter * 0.000621371;
    }
}
.
.
.
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class ConverterServer {
    public static void main(String[] args) {
        try {
            ConverterImpl converter = new ConverterImpl();
            Registry registry = LocateRegistry.createRegistry(1099);
            registry.rebind("ConverterService", converter);
            System.out.println("Server is running...");
        } catch (Exception e) {
            System.err.println("Server exception: " + e.toString());
            e.printStackTrace();
        }
    }
}
.
.
.
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class ConverterClient {
    public static void main(String[] args) {
        try {
            Registry registry = LocateRegistry.getRegistry("localhost", 1099);
            ConverterInterface converter = (ConverterInterface) registry.lookup("ConverterService");

            double meter = 1000;
            double mile = converter.meterToMile(meter);
            System.out.println("Meter: " + meter + " -> Mile: " + mile);
        } catch (Exception e) {
            System.err.println("Client exception: " + e.toString());
            e.printStackTrace();
        }
    }
}
-----------------------------------------------------------
import java.rmi.Remote;
import java.rmi.RemoteException;

public interface CalculatorInterface extends Remote {
    double square(double number) throws RemoteException;
}
.
.
.
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class CalculatorImpl extends UnicastRemoteObject implements CalculatorInterface {

    protected CalculatorImpl() throws RemoteException {
        super();
    }

    @Override
    public double square(double number) throws RemoteException {
        return number * number;
    }
}
.
.
.
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class CalculatorServer {
    public static void main(String[] args) {
        try {
            CalculatorImpl calculator = new CalculatorImpl();
            Registry registry = LocateRegistry.createRegistry(1099);
            registry.rebind("CalculatorService", calculator);
            System.out.println("Server is running...");
        } catch (Exception e) {
            System.err.println("Server exception: " + e.toString());
            e.printStackTrace();
        }
    }
}
.
.
.
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class CalculatorClient {
    public static void main(String[] args) {
        try {
            Registry registry = LocateRegistry.getRegistry("localhost", 1099);
            CalculatorInterface calculator = (CalculatorInterface) registry.lookup("CalculatorService");

            double number = 5;
            double result = calculator.square(number);
            System.out.println("Square of " + number + " is: " + result);
        } catch (Exception e) {
            System.err.println("Client exception: " + e.toString());
            e.printStackTrace();
        }
    }
}


